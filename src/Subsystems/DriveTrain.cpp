// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"


#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/TankDrive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    backLeft = RobotMap::driveTrainbackLeft;
    backRight = RobotMap::driveTrainbackRight;
    frontLeft = RobotMap::driveTrainfrontLeft;
    frontRight = RobotMap::driveTrainfrontRight;
    leftShift = RobotMap::driveTrainleftShift;
    rightShift = RobotMap::driveTrainrightShift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::tankDrive(std::shared_ptr<Joystick> stick){//tank drive by setting stick's raw axis values to motor controllers

	float left = stick.get()->GetRawAxis(2);//gets values, may need to negate left side instead if when going forward it goes backwards instead
	float right = -1 * stick.get()->GetRawAxis(5);//may need to change axis numbers if using different controller.

	if(fabs(left) > 0.1 || fabs(right) > 0.1){//if inputs are greater than 0.1 robot will drive.
			frontLeft.get()->Set(left);
			backLeft.get()->Set(left);
			frontRight.get()->Set(right);
			backRight.get()->Set(right);
		}

}


void DriveTrain::shiftOne(){
	leftShift.get()->Set(DoubleSolenoid::kForward);//shifts drivetrain, idk if forward is the low torque or not so you can figure it out.
	rightShift.get()->Set(DoubleSolenoid::kForward);
}

void DriveTrain::shiftTwo(){
	leftShift.get()->Set(DoubleSolenoid::kReverse);
	rightShift.get()->Set(DoubleSolenoid::kReverse);

}

void DriveTrain::solenoidOff(){
	leftShift.get()->Set(DoubleSolenoid::kOff);
	rightShift.get()->Set(DoubleSolenoid::kOff);
}

void DriveTrain::driveForward(){//drive forward for auto, change speeds if needed.
	float left = 0.5;//may need to switch which one is negative if it goes backwards
	float right = -0.5;
	frontLeft.get()->Set(left);
	backLeft.get()->Set(left);
	frontRight.get()->Set(right);
	backRight.get()->Set(right);
}

void DriveTrain::stop(){//stops robot.
	frontLeft.get()->Set(0);
	backLeft.get()->Set(0);
	frontRight.get()->Set(0);
	backRight.get()->Set(0);
}
